<?php

/**
 * @file
 * Two-factor authentication for Drupal.
 */

/**
 * Implements hook_menu().
 */
function tfa_menu() {
  $items['system/tfa/%user/%'] = array(
    'title' => 'Two-Factor Authentication',
    'page callback' => 'tfa_begin_form',
    'page arguments' => array(2),
    'access callback' => 'tfa_entry_access',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'file' => 'tfa.form.inc',
  );

  $items['admin/user/tfa'] = array(
    'title' => 'Two-factor Authentication',
    'description' => 'TFA process and plugin settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_admin_settings'),
    'access arguments' => array('admin tfa settings'),
    'file' => 'tfa.admin.inc',
  );

  return $items;
}

/**
 * Validate access to TFA code entry form.
 */
function tfa_entry_access($account, $url_hash) {
  // Generate a hash for this account.
  $hash = tfa_login_hash($account);
  $context = tfa_get_context($account);

  return $hash === $url_hash && !empty($context) && $context['uid'] === $account->uid;
}

/**
 * Implements hook_perm().
 */
function tfa_perm() {
  return array(
    // Require TFA process.
    // Require two-factor to authenticate. Note: users without TFA setup will be
    // unable to log in.
    'require tfa',

    // Administer TFA.
    // Configure two-factor authentication settings.
    'admin tfa settings',
  );
}

/**
 * Set context for account's TFA process.
 *
 * For context format see tfa_start_context().
 *
 * @see tfa_start_context()
 *
 * @param object $account
 *   User account
 * @param array $context
 *   Context array
 */
function tfa_set_context($account, $context) {
  $_SESSION['tfa'][$account->uid] = $context;
  $_SESSION['tfa'][$account->uid]['uid'] = $account->uid;

  // Clear existing static TFA process.
  tfa_drupal_static_reset('tfa_get_process');
}

/**
 * Context for account TFA process.
 *
 * @see tfa_start_context()
 *
 * @param object $account
 *   User account
 *
 * @return array
 *   Context array.
 */
function tfa_get_context($account) {
  $context = array();
  if (isset($_SESSION['tfa'][$account->uid])) {
    $context = $_SESSION['tfa'][$account->uid];
  }

  // Allow other modules to modify TFA context.
  drupal_alter('tfa_context', $context);

  return $context;
}

/**
 * Start context for TFA.
 *
 * @param object $account
 *   User account
 *
 * @return array
 *   array(
 *     'uid' => 9,
 *     'plugins' => array(
 *       'validate' => 'tfa_my_send_plugin',
 *       'login' => array('tfa_my_login_plugin'),
 *       'fallback' => array('tfa_my_recovery_plugin'),
 *     ),
 */
function tfa_start_context($account) {
  $plugins = array(
    'validate' => '',
    'fallback' => array(),
    'login' => array(),
  );

  $api = module_invoke_all('tfa_api');
  // Add login plugins.
  foreach (variable_get('tfa_login_plugins', array()) as $key) {
    if (array_key_exists($key, $api)) {
      $plugins['login'][] = $key;
    }
  }

  // Add validate.
  $validate = variable_get('tfa_validate_plugin', '');
  if (!empty($validate) && array_key_exists($validate, $api)) {
    $plugins['validate'] = $validate;
  }

  // Add fallback plugins.
  foreach (variable_get('tfa_fallback_plugins', array()) as $key) {
    if (array_key_exists($key, $api)) {
      $plugins['fallback'][] = $key;
    }
  }

  // Allow other modules to modify TFA context.
  $context = array('uid' => $account->uid, 'plugins' => $plugins);
  drupal_alter('tfa_context', $context);
  tfa_set_context($account, $context);

  return $context;
}

/**
 * Remove context for account.
 *
 * @param object $account
 *   User account object
 */
function tfa_clear_context($account) {
  unset($_SESSION['tfa'][$account->uid]);
}

/**
 * Get Tfa object in the account's current context.
 *
 * @param object $account
 *   User account
 *
 * @return Tfa
 *   Tfa instance.
 */
function tfa_get_process($account) {
  $tfa = &tfa_drupal_static(__FUNCTION__);
  if (!isset($tfa)) {
    $context = tfa_get_context($account);
    if (empty($context)) {
      $context = tfa_start_context($account);
    }
    // Get plugins.
    $fallback_plugins = $login_plugins = array();
    $validate_plugin = $context['plugins']['validate'];
    $validate = tfa_get_plugin($validate_plugin, $context);
    if (!empty($context['plugins']['fallback'])) {
      foreach ($context['plugins']['fallback'] as $plugin_name) {
        // Avoid duplicates and using the validate plugin.
        if (!array_key_exists($plugin_name, $fallback_plugins) && $plugin_name !== $validate_plugin) {
          $plugin_object = tfa_get_plugin($plugin_name, $context);
          if ($plugin_object) {
            $fallback_plugins[$plugin_name] = $plugin_object;
          }
        }
      }
    }
    if (!empty($context['plugins']['login'])) {
      foreach ($context['plugins']['login'] as $plugin_name) {
        if (!array_key_exists($plugin_name, $login_plugins) && $plugin_name !== $validate_plugin) {
          $plugin_object = tfa_get_plugin($plugin_name, $context);
          if ($plugin_object) {
            $login_plugins[$plugin_name] = $plugin_object;
          }
        }
      }
    }
    $tfa = new Tfa($validate, $context, $fallback_plugins, $login_plugins);
  }

  return $tfa;
}

/**
 * Get or create a TFA plugin object.
 *
 * @param string $plugin_name
 * @param array $context
 *
 * @return TfaBasePlugin|FALSE
 */
function tfa_get_plugin($plugin_name, array $context) {
  $api = module_invoke_all('tfa_api');
  // Call plugin callback.
  if (isset($api[$plugin_name]['callback'])) {
    $function = $api[$plugin_name]['callback'];

    return $function($context);
  }

  // Or (plugin_name)_create
  $function = $plugin_name . '_create';
  if (function_exists($function)) {

    return $function($context);
  }

  // Or if class is defined instantiate it.
  if (isset($api[$plugin_name]['class'])) {
    $class = $api[$plugin_name]['class'];

    return new $class($context);
  }

  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tfa_form_user_login_alter(&$form, &$form_state) {
  _tfa_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tfa_form_user_login_block_alter(&$form, &$form_state) {
  _tfa_user_login_form_alter($form, $form_state);
  $form['#action'] = $_GET['q'];
}

/**
 * Helper function to alter the user login forms.
 */
function _tfa_user_login_form_alter(&$form, &$form_state) {
  if (variable_get('tfa_enabled', 0)) {
    $validate_callbacks_to_replace = array(
      'user_login_authenticate_validate' => 'tfa_user_login_form_validate_authenticate',
      'user_login_final_validate' => NULL,
    );
    foreach ($validate_callbacks_to_replace as $from => $to) {
      $from_key = array_search($from, $form['#validate']);
      if ($from_key !== FALSE) {
        if ($to) {
          $form['#validate'][$from_key] = $to;
        }
        else {
          unset($form['#validate'][$from_key]);
        }
      }
    }

    // Replace Drupal's login submit handler with TFA to check if
    // authentication should be interrupted and user redirected to TFA form.
    // Replacing user_login_submit() in its position allows other form_alter
    // handlers to run after. However, the user must be redirected to the
    // TFA form so the last handler in the order must be
    // tfa_login_form_redirect(). Other modules may alter the tfa_redirect
    // options element as needed to set the destination after TFA.
    $from_key = array_search('user_login_submit', $form['#submit']);
    if ($from_key !== FALSE) {
      $form['#submit'][$from_key] = 'tfa_user_login_form_submit';
    }
    $form['#submit'][] = 'tfa_user_login_form_submit_redirect';
  }
}

function tfa_user_login_form_validate_authenticate($form, &$form_state) {
  // Load the account to check if the e-mail is denied by an access rule.
  // Doing this check here saves us a user_load() in user_login_name_validate()
  // and introduces less code change for a security fix.
  $account = user_load(array(
    'name' => $form_state['values']['name'],
    'pass' => trim($form_state['values']['pass']),
    'status' => 1,
  ));

  if ($account && !user_access('require tfa', $account)) {
    // Normal login process.
    user_login_authenticate_validate($form, $form_state);
    user_login_final_validate($form, $form_state);

    return;
  }

  if (!$account) {
    form_set_error('name', t('Sorry, unrecognized username or password. <a href="@password">Have you forgotten your password?</a>', array('@password' => url('user/password'))));
  }
  elseif (drupal_is_denied('mail', $account->mail)) {
    form_set_error('name', t('The name %name is registered using a reserved e-mail address and therefore could not be logged in.', array('%name' => $account->name)));
  }

  if (form_get_errors() || empty($form_values['name']) || empty($form_values['pass']) || !$account) {
    watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
  }
}

/**
 * Login submit handler to determine if TFA process is applicable.
 */
function tfa_user_login_form_submit($form, &$form_state) {
  $account = (isset($form_state['uid']) ?
    user_load($form_state['uid']) :
    user_load(array('name' => $form_state['values']['name']))
  );

  if (!user_access('require tfa', $account)) {
    // Normal login process.
    user_login_submit($form, $form_state);

    return;
  }

  // Similar to tfa_user_login() but not required to force user logout.
  $tfa = tfa_get_process($account);

  if (user_access('require tfa', $account) && !tfa_login_complete($account) && !$tfa->ready()) {
    drupal_set_message(t('Login disallowed. You are required to setup two-factor authentication. Please contact a site administrator.'), 'error');
    $form_state['redirect'] = 'user';
  }
  elseif (!tfa_login_complete($account) && $tfa->ready() && !tfa_login_allowed($account)) {
    // Restart flood levels, session context, and TFA process.
    $identifier = variable_get('user_failed_login_identifier_uid_only', FALSE) ? $account->uid : $account->uid . '-' . ip_address();
    tfa_flood_clear_event('tfa_user', $identifier);
    tfa_flood_register_event('tfa_begin');
    $context = tfa_start_context($account);
    $tfa = tfa_get_process($account);

    $query = tfa_drupal_get_query_parameters();
    if (!empty($form_state['redirect'])) {
      // If there's an existing redirect set it in TFA context and
      // tfa_form_submit() will extract and set once process is complete.
      $context['redirect'] = $form_state['redirect'];
    }
    unset($_GET['destination']);

    // Begin TFA and set process context.
    $tfa->begin();
    $context = $tfa->getContext();
    tfa_set_context($account, $context);

    $login_hash = tfa_login_hash($account);
    $form_state['tfa_redirect'] = array(
      'system/tfa/' . $account->uid . '/' . $login_hash,
      array('query' => $query),
    );
  }
  else {
    // Authentication can continue.
    $GLOBALS['user'] = $account;
    user_authenticate_finalize($form_state['values']);
    user_login_submit($form, $form_state);
  }
}

/**
 * Login submit handler for TFA form redirection.
 *
 * Should be last invoked form submit handler for forms user_login and
 * user_login_block so that when the TFA process is applied the user will be
 * sent to the TFA form.
 */
function tfa_user_login_form_submit_redirect($form, &$form_state) {
  if (isset($form_state['tfa_redirect'])) {
    $account = (isset($form_state['uid']) ?
      user_load($form_state['uid']) :
      user_load(array('name' => $form_state['values']['name']))
    );

    if (user_access('require tfa', $account)) {
      $form_state['redirect'] = $form_state['tfa_redirect'];
    }
  }
}

/**
 * Check if TFA process has completed so authentication should not be stopped.
 *
 * @param object $account
 *   User account
 *
 * @return bool
 */
function tfa_login_complete($account) {
  // TFA master login allowed switch is set by tfa_login().
  if (isset($_SESSION['tfa'][$account->uid]['login']) && $_SESSION['tfa'][$account->uid]['login'] === TRUE) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Check TFA plugins if login should be interrupted for authenticating account.
 *
 * @param object $account
 *   User account
 *
 * @return bool
 */
function tfa_login_allowed($account) {
  // Check if login plugins will allow login.
  $tfa = tfa_get_process($account);

  return $tfa->loginAllowed() === TRUE;
}

/**
 * Implements hook_user_login().
 */
function tfa_user_login(&$edit, $account) {
  if (!variable_get('tfa_enabled', 0)) {
    return;
  }

  $tfa = tfa_get_process($account);

  if (user_access('require tfa', $account) && !tfa_login_complete($account) && !$tfa->ready()) {
    tfa_logout();
    drupal_set_message(t('Login disallowed. You are required to setup two-factor authentication. Please contact a site administrator.'), 'error');
    drupal_goto('user');
  }
  elseif (!tfa_login_complete($account) && $tfa->ready() && !tfa_login_allowed($account)) {
    // User has been authenticated so force logout and redirect to TFA form.
    tfa_logout();
    // Restart flood levels, session context, and TFA process.
    $identifier = variable_get('user_failed_login_identifier_uid_only', FALSE) ? $account->uid : $account->uid . '-' . ip_address();
    tfa_flood_clear_event('tfa_user', $identifier);
    flood_register_event('tfa_begin');
    // @todo Delete this unused variable.
    $context = tfa_start_context($account);
    $tfa = tfa_get_process($account);

    // Hold onto destination. It will be used in tfa_form_submit().
    $query = tfa_drupal_get_query_parameters();
    if (arg(0) == 'user' && arg(1) == 'reset') {
      // If one-time login reset destination and hold onto token.
      $query['destination'] = 'user/' . $account->uid . '/edit';
      $query['pass-reset-token'] = arg(4);
    }
    unset($_GET['destination']);

    // Begin TFA and set process context.
    $tfa->begin();
    $context = $tfa->getContext();
    tfa_set_context($account, $context);

    $login_hash = tfa_login_hash($account);
    // Use of $_GET['destination'] would allow other hooks to run but since the
    // current user is no longer authenticated their expectation would be wrong.
    drupal_goto("system/tfa/{$account->uid}/$login_hash", array('query' => $query));
  }
}

/**
 * Unathenticate the user. Similar to user_logout() but does not redirect.
 */
function tfa_logout() {
  global $user;
  watchdog('tfa', 'Session closed for %name.', array('%name' => $user->name));
  module_invoke_all('user_logout', $user);
  // Destroy the current session, and reset $user to the anonymous user.
  session_destroy();
  // Force anonymous user.
  $user = drupal_anonymous_user();
}

/**
 * Authenticate the user.
 *
 * @param object $account
 *   User account object.
 */
function tfa_login($account) {
  global $user;

  $user = $account;
  // Update the user table timestamp noting user has logged in.
  $user->login = time();
  db_query('UPDATE {users} SET login = %d WHERE uid = %d', $user->login, $user->uid);

  // Regenerate the session ID to prevent against session fixation attacks.
  sess_regenerate();

  watchdog('tfa', 'Session opened for %name.', array('%name' => $user->name));
  // Clear existing context and set master authenticated context.
  tfa_clear_context($user);
  $_SESSION['tfa'][$user->uid]['login'] = TRUE;

  // Truncate flood for user.
  tfa_flood_clear_event('tfa_begin');
  $identifier = variable_get('user_failed_login_identifier_uid_only', FALSE) ? $account->uid : $account->uid . '-' . ip_address();
  tfa_flood_clear_event('tfa_user', $identifier);
  $edit = array();
  user_module_invoke('login', $edit, $user);
}

/**
 * Implements hook_help().
 */
function tfa_help($path, $arg) {
  $link = '<p>' . t('For up-to-date help see the <a href="!url">TFA module documentation</a> on drupal.org.', array('!url' => url('http://drupal.org/node/1663240'))) . '</p>';
  switch ($path) {
    case 'admin/help#tfa':
      $output = '<h3>' . t('Two-factor Authentication for Drupal') . '</h3>';
      $output .= '<p>' . t('TFA is a base module for providing two-factor authentication for your Drupal site. As such it provides a framework for specific TFA plugins that act during user authentication to confirm a "second factor" for the user.') . '<p>';
      // @todo Include explanations on TFA module variables and fallback
      // ordering.
      $output .= $link;

      return $output;
  }

  return NULL;
}

/**
 * Generate account hash to access the TFA form.
 *
 * @param object $account
 *   User account.
 *
 * @return string
 *   Random hash.
 */
function tfa_login_hash($account) {
  // Using account login will mean this hash will become invalid once user has
  // authenticated via TFA.
  $data = implode(':', array($account->name, $account->pass, $account->login));

  return tfa_drupal_hash_base64($data);
}

/**
 * Registers an event for the current visitor to the flood control mechanism.
 *
 * @param $name
 *   The name of an event.
 * @param $window
 *   Optional number of seconds before this event expires. Defaults to 3600 (1
 *   hour). Typically uses the same value as the flood_is_allowed() $window
 *   parameter. Expired events are purged on cron run to prevent the flood table
 *   from growing indefinitely.
 * @param $identifier
 *   Optional identifier (defaults to the current user's IP address).
 */
function tfa_flood_register_event($name, $window = 3600, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }

  db_query(
    "INSERT INTO {flood} (event, hostname, timestamp) VALUES('%s', '%s', %d)",
    $name,
    $identifier,
    time() + $window
  );
}

/**
 * Makes the flood control mechanism forget an event for the current visitor.
 *
 * @param string $name
 *   The name of an event.
 * @param string $identifier
 *   Optional identifier (defaults to the current user's IP address).
 */
function tfa_flood_clear_event($name, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }

  db_query("DELETE FROM {flood} WHERE event = '%s' AND hostname = '%s'", $name, $identifier);
}

/**
 * Checks whether a user is allowed to proceed with the specified event.
 *
 * Events can have thresholds saying that each user can only do that event
 * a certain number of times in a time window. This function verifies that the
 * current user has not exceeded this threshold.
 *
 * @param string $name
 *   The unique name of the event.
 * @param int $threshold
 *   The maximum number of times each user can do this event per time window.
 * @param int $window
 *   Number of seconds in the time window for this event (default is 3600
 *   seconds, or 1 hour).
 * @param string $identifier
 *   Unique identifier of the current user. Defaults to their IP address.
 *
 * @return bool
 *   TRUE if the user is allowed to proceed. FALSE if they have exceeded the
 *   threshold and should not be allowed to proceed.
 */
function tfa_flood_is_allowed($name, $threshold, $window = 3600, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }

  $number = db_result(db_query("SELECT COUNT(fid) FROM {flood} WHERE event = '%s' AND hostname = '%s' AND timestamp > %d", array(
    $name,
    $identifier,
    time() - $window,
  )));

  return ($number < $threshold);
}

/**
 * Provides central static variable storage.
 *
 * All functions requiring a static variable to persist or cache data within
 * a single page request are encouraged to use this function unless it is
 * absolutely certain that the static variable will not need to be reset during
 * the page request. By centralizing static variable storage through this
 * function, other functions can rely on a consistent API for resetting any
 * other function's static variables.
 *
 * Example:
 * @code
 * function language_list($field = 'language') {
 *   $languages = &drupal_static(__FUNCTION__);
 *   if (!isset($languages)) {
 *     // If this function is being called for the first time after a reset,
 *     // query the database and execute any other code needed to retrieve
 *     // information about the supported languages.
 *     ...
 *   }
 *   if (!isset($languages[$field])) {
 *     // If this function is being called for the first time for a particular
 *     // index field, then execute code needed to index the information already
 *     // available in $languages by the desired field.
 *     ...
 *   }
 *   // Subsequent invocations of this function for a particular index field
 *   // skip the above two code blocks and quickly return the already indexed
 *   // information.
 *   return $languages[$field];
 * }
 * function locale_translate_overview_screen() {
 *   // When building the content for the translations overview page, make
 *   // sure to get completely fresh information about the supported languages.
 *   drupal_static_reset('language_list');
 *   ...
 * }
 * @endcode
 *
 * In a few cases, a function can have certainty that there is no legitimate
 * use-case for resetting that function's static variable. This is rare,
 * because when writing a function, it's hard to forecast all the situations in
 * which it will be used. A guideline is that if a function's static variable
 * does not depend on any information outside of the function that might change
 * during a single page request, then it's ok to use the "static" keyword
 * instead of the drupal_static() function.
 *
 * Example:
 * @code
 * function actions_do(...) {
 *   // $stack tracks the number of recursive calls.
 *   static $stack;
 *   $stack++;
 *   if ($stack > variable_get('actions_max_stack', 35)) {
 *     ...
 *     return;
 *   }
 *   ...
 *   $stack--;
 * }
 * @endcode
 *
 * In a few cases, a function needs a resettable static variable, but the
 * function is called many times (100+) during a single page request, so
 * every microsecond of execution time that can be removed from the function
 * counts. These functions can use a more cumbersome, but faster variant of
 * calling drupal_static(). It works by storing the reference returned by
 * drupal_static() in the calling function's own static variable, thereby
 * removing the need to call drupal_static() for each iteration of the function.
 * Conceptually, it replaces:
 * @code
 * $foo = &drupal_static(__FUNCTION__);
 * @endcode
 * with:
 * @code
 * // Unfortunately, this does not work.
 * static $foo = &drupal_static(__FUNCTION__);
 * @endcode
 * However, the above line of code does not work, because PHP only allows static
 * variables to be initializied by literal values, and does not allow static
 * variables to be assigned to references.
 * - http://php.net/manual/language.variables.scope.php#language.variables.scope.static
 * - http://php.net/manual/language.variables.scope.php#language.variables.scope.references
 * The example below shows the syntax needed to work around both limitations.
 * For benchmarks and more information, see http://drupal.org/node/619666.
 *
 * Example:
 * @code
 * function user_access($string, $account = NULL) {
 *   // Use the advanced drupal_static() pattern, since this is called very
 *   // often.
 *   static $drupal_static_fast;
 *   if (!isset($drupal_static_fast)) {
 *     $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
 *   }
 *   $perm = &$drupal_static_fast['perm'];
 *   ...
 * }
 * @endcode
 *
 * @param string $name
 *   Globally unique name for the variable. For a function with only one static,
 *   variable, the function name (e.g. via the PHP magic __FUNCTION__ constant)
 *   is recommended. For a function with multiple static variables add a
 *   distinguishing suffix to the function name for each one.
 * @param mixed $default_value
 *   Optional default value.
 * @param bool $reset
 *   TRUE to reset one or all variables(s). This parameter is only used
 *   internally and should not be passed in; use drupal_static_reset() instead.
 *   (This function's return value should not be used when TRUE is passed in.)
 *
 * @return mixed
 *   Returns a variable by reference.
 *
 * @see drupal_static_reset()
 */
function &tfa_drupal_static($name, $default_value = NULL, $reset = FALSE) {
  static $data = array(), $default = array();
  // First check if dealing with a previously defined static variable.
  if (isset($data[$name]) || array_key_exists($name, $data)) {
    // Non-NULL $name and both $data[$name] and $default[$name] statics exist.
    if ($reset) {
      // Reset pre-existing static variable to its default value.
      $data[$name] = $default[$name];
    }
    return $data[$name];
  }
  // Neither $data[$name] nor $default[$name] static variables exist.
  if (isset($name)) {
    if ($reset) {
      // Reset was called before a default is set and yet a variable must be
      // returned.
      return $data;
    }
    // First call with new non-NULL $name. Initialize a new static variable.
    $default[$name] = $data[$name] = $default_value;
    return $data[$name];
  }
  // Reset all: ($name == NULL). This needs to be done one at a time so that
  // references returned by earlier invocations of drupal_static() also get
  // reset.
  foreach ($default as $name => $value) {
    $data[$name] = $value;
  }
  // As the function returns a reference, the return should always be a
  // variable.
  return $data;
}

/**
 * Resets one or all centrally stored static variable(s).
 *
 * @param string|null $name
 *   Name of the static variable to reset. Omit to reset all variables.
 *   Resetting all variables should only be used, for example, for running unit
 *   tests with a clean environment.
 */
function tfa_drupal_static_reset($name = NULL) {
  tfa_drupal_static($name, NULL, TRUE);
}

/**
 * Processes a URL query parameter array to remove unwanted elements.
 *
 * @param array|null $query
 *   (optional) An array to be processed. Defaults to $_GET.
 * @param array $exclude
 *   (optional) A list of $query array keys to remove. Use "parent[child]" to
 *   exclude nested items. Defaults to array('q').
 * @param string $parent
 *   Internal use only. Used to build the $query array key for nested items.
 *
 * @return array
 *   An array containing query parameters, which can be used for url().
 */
function tfa_drupal_get_query_parameters(array $query = NULL, array $exclude = array('q'), $parent = '') {
  // Set defaults, if none given.
  if (!isset($query)) {
    $query = $_GET;
  }
  // If $exclude is empty, there is nothing to filter.
  if (empty($exclude)) {
    return $query;
  }
  elseif (!$parent) {
    $exclude = array_flip($exclude);
  }

  $params = array();
  foreach ($query as $key => $value) {
    $string_key = ($parent ? $parent . '[' . $key . ']' : $key);
    if (isset($exclude[$string_key])) {
      continue;
    }

    if (is_array($value)) {
      $params[$key] = tfa_drupal_get_query_parameters($value, $exclude, $string_key);
    }
    else {
      $params[$key] = $value;
    }
  }

  return $params;
}

/**
 * Calculates a base-64 encoded, URL-safe sha-256 hash.
 *
 * @param string $data
 *   String to be hashed.
 *
 * @return string
 *   A base-64 encoded sha-256 hash, with + replaced with -, / with _ and
 *   any = padding characters removed.
 */
function tfa_drupal_hash_base64($data) {
  $hash = base64_encode(hash('sha256', $data, TRUE));

  // Modify the hash so it's safe to use in URLs.
  return strtr($hash, array('+' => '-', '/' => '_', '=' => ''));
}

/**
 * Check whether a plain text password matches a stored hashed password.
 *
 * Alternative implementations of this function may use other data in the
 * $account object, for example the uid to look up the hash in a custom table
 * or remote database.
 *
 * @param string $name
 *   A user name.
 * @param string $password
 *   A plain-text password
 *
 * @return bool
 *   TRUE or FALSE.
 */
function tfa_user_check_password($name, $password) {
  return (bool) user_load(array(
    'name' => $name,
    'pass' => $password,
  ));
}
